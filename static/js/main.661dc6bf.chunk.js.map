{"version":3,"sources":["logo.svg","initialMarkdown.js","components/Editor.js","actions/actions.js","actions/actionTypes.js","components/Preview.js","reducers/index.js","reducers/markdownReducer.js","actions/store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","INITIAL_MARKDOWN","Editor","props","state","textInput","updateText","bind","event","this","markdownUpdate","target","value","markdownRender","setState","id","rows","onChange","React","Component","connect","message","dispatch","type","payload","Preview","start","marked","currentInput","__html","prevProps","stateText","setOptions","breaks","markdown","update","dangerouslySetInnerHTML","text","combineReducers","action","newState","store","createStore","rootReducer","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2KAAAA,EAAOC,QAAU,IAA0B,kC,uKCA9BC,EAAgB,g+BCMvBC,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTC,UAAWJ,GAGf,EAAKK,WAAa,EAAKA,WAAWC,KAAhB,gBAPH,E,wEAURC,GACPC,KAAKN,MAAMO,eAAeF,EAAMG,OAAOC,OACvCH,KAAKN,MAAMU,eAAeL,EAAMG,OAAOC,OAEvCH,KAAKK,SAAW,CACZT,UAAWG,EAAMG,OAAOC,S,+BAK5B,OACI,8BAAUG,GAAG,SAASC,KAAK,KAAKC,SAAUR,KAAKH,YAAaG,KAAKL,MAAMC,e,GAtB9Da,IAAMC,WAsCZC,eAXS,SAAChB,GACrB,MAAO,CAAEiB,QAASjB,MAGK,SAACkB,GACxB,MAAO,CACHZ,eAAgB,SAACW,GAAD,OAAaC,ECpC1B,CACHC,KCJuB,kBDKvBC,QDkC6CH,KAC7CR,eAAgB,SAACQ,GAAD,OAAaC,EC9B1B,CACHC,KCVuB,kBDWvBC,QD4BqDH,QAI9CD,CAA6ClB,G,iBGvCtDuB,E,YACF,WAAYtB,GAAQ,IAAD,sBACf,4CAAMA,IAEN,IAAIuB,EAAQC,IAAO1B,GAHJ,OAIf,EAAKG,MAAQ,CACTwB,aAAc,CAAEC,OAAQH,IALb,E,gFASAI,GACf,GAAGA,EAAUC,YAActB,KAAKN,MAAM4B,UAAW,CAC7CJ,IAAOK,WAAW,CACdC,QAAQ,IAEZ,IAAIC,EAAWP,IAAOlB,KAAKN,MAAM4B,UAAUI,QAC3C1B,KAAKK,SAAS,CACVc,aAAc,CAAEC,OAAQK,Q,+BAMhC,OACI,yBAAKnB,GAAG,gBACJ,yBAAKA,GAAG,UAAUqB,wBAAyB3B,KAAKL,MAAMwB,oB,GAzBhDV,IAAMC,WAqCbC,eANS,SAACiB,GACrB,MAAO,CACHN,UAAWM,KAIqB,KAAzBjB,CAA+BK,G,OCvC/Ba,cAAgB,CAAEH,OCClB,WAAwC,IAA/B/B,EAA8B,uDAFjC,GAEyBmC,EAAQ,uCAClD,OAAOA,EAAOhB,MACV,IHNuB,kBGOnB,IAAIiB,EAAWD,EAAOf,QACtB,OAAOgB,EACX,IHRuB,kBGSnB,OAAOD,EAAOf,QAClB,QACI,OAAOpB,MCRJqC,EADDC,YAAYC,GCsBXC,MAZf,WACE,OACE,kBAAC,IAAD,CAAUH,MAAOA,GACf,yBAAKI,UAAU,OACb,wBAAI9B,GAAG,eAAP,sBACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCPY+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.661dc6bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","export const INITIAL_MARKDOWN = \r\n/*`# h1 tag\r\n\r\n## h2 tag\r\n\r\n[a link](https://spec.commonmark.org/0.29/)\r\n\r\n\\`let inlineCode = true;\\`\r\n\r\n\\`\\`\\`\r\n// block code\r\nfor(int i = 0; i < 10; i++)\r\n{\r\n    cout << \"i\";\r\n}\r\n\\`\\`\\`\r\n\r\n**bold text**\r\n\r\n1. list item one\r\n2. list item two\r\n\r\n> a block quote\r\n\r\n![An image](http://4.bp.blogspot.com/-TUHg4T2YpJ8/TlOw8QOtQrI/AAAAAAAAANs/4h8E9aQso3Y/s1600/IPKat%2B23%2B-%2Bcat%2Bcoffee.jpg \"Alt text\")\r\n`\r\n*/\r\n`# Hey there! This is a markdown previewer\r\n## See, this text is rendered as an h2 element\r\n\r\nIf you want to know about the many things that you can type, [check this link out](https://spec.commonmark.org/0.29/)\r\n\r\n# Here are some more examples: \r\nThis next example is some inline code:\r\n\r\n\\`bool coffeeDeprived = true;\\`\r\n\r\n\\`\\`\\`\r\n// And this is a block of code\r\nif(coffeeDeprived) \r\n{\r\n    makeMoreCoffee(darkRoast, 1);\r\n}\r\nelse\r\n{\r\n    cout << \"Gotta keep coding\";\r\n}\r\n\\`\\`\\`\r\n\r\n**Here comes a list**\r\n1. First Item\r\n2. Second Item\r\n\r\nNext we have a blockquote element:\r\n> \"A clever person solves a person. A wise person avoids it\" - Albert Einstein\r\n\r\nCheck out other cool stuff I've done in my [personal portfolio!](https://jesusrodriguezunt.github.io/Portfolio/index.html) \r\n\r\nIn the meantime, let's enjoy some cofee\r\n\r\n![getting ready to work](http://4.bp.blogspot.com/-TUHg4T2YpJ8/TlOw8QOtQrI/AAAAAAAAANs/4h8E9aQso3Y/s1600/IPKat%2B23%2B-%2Bcat%2Bcoffee.jpg \"Coffee before programming\")\r\n`;","import React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { update, renderMarkdown } from '../actions/actions';\r\nimport { INITIAL_MARKDOWN } from '../initialMarkdown';\r\n\r\nclass Editor extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            textInput: INITIAL_MARKDOWN,\r\n        }\r\n\r\n        this.updateText = this.updateText.bind(this);\r\n    }\r\n\r\n    updateText(event) {\r\n        this.props.markdownUpdate(event.target.value);\r\n        this.props.markdownRender(event.target.value);\r\n\r\n        this.setState = {\r\n            textInput: event.target.value,\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <textarea id=\"editor\" rows=\"20\" onChange={this.updateText}>{this.state.textInput}</textarea>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { message: state };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return { \r\n        markdownUpdate: (message) => dispatch(update(message)),\r\n        markdownRender: (message) => dispatch(renderMarkdown(message))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Editor);","import { MARKDOWN_UPDATE, MARKDOWN_RENDER } from './actionTypes';\r\n\r\nexport const update = function(text) {\r\n    return {\r\n        type: MARKDOWN_UPDATE,\r\n        payload: text,\r\n    }\r\n}\r\n\r\nexport const renderMarkdown = function(text) {\r\n    return {\r\n        type: MARKDOWN_RENDER,\r\n        payload: text,\r\n    }\r\n}","export const MARKDOWN_UPDATE = \"MARKDOWN_UPDATE\";\r\nexport const MARKDOWN_RENDER = \"MARKDOWN_RENDER\";","import React from 'react';\r\nimport marked from 'marked';\r\nimport { connect } from 'react-redux';\r\nimport { INITIAL_MARKDOWN } from '../initialMarkdown';\r\n\r\nclass Preview extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let start = marked(INITIAL_MARKDOWN);\r\n        this.state = {\r\n            currentInput: { __html: start},\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        if(prevProps.stateText !== this.props.stateText) {\r\n            marked.setOptions({\r\n                breaks: true,\r\n            });\r\n            let markdown = marked(this.props.stateText.update);\r\n            this.setState({\r\n                currentInput: { __html: markdown }\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"preview-area\">\r\n                <div id=\"preview\" dangerouslySetInnerHTML={this.state.currentInput}></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (text) => {\r\n    return {\r\n        stateText: text,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(Preview);","import { combineReducers } from 'redux';\r\nimport markdownUpdate from './markdownReducer';\r\n\r\nexport default combineReducers({ update: markdownUpdate });","import { MARKDOWN_UPDATE, MARKDOWN_RENDER } from \"../actions/actionTypes\";\r\n\r\nconst initialState = ''\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case MARKDOWN_UPDATE:\r\n            let newState = action.payload;\r\n            return newState;\r\n        case MARKDOWN_RENDER:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore } from 'redux';\r\nimport rootReducer from '../reducers';\r\n\r\nconst store = createStore(rootReducer);\r\nexport default store;\r\n","// This will be the place where I call all the individual components\r\n/** Change the name of the app before it is complete**/\r\n\r\n// try to write everything here and then break it up\r\n\r\nimport React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Editor from './components/Editor';\r\nimport Preview from './components/Preview';\r\nimport { Provider } from 'react-redux';\r\nimport store from './actions/store';\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"App\">\r\n        <h1 id=\"site-header\">Markdown Previewer</h1>\r\n        <Editor />\r\n        <Preview />\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'; // this is the app tha uses the store\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}